@page "/search"

<PageTitle>Suche und Filter</PageTitle>

@inject AppDataService AppDataService

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playwrite+CL:wght@100..400&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Kanit:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900&display=swap" rel="stylesheet">
</head>

<h1>Suche und Filter</h1>

<div class="search-container">
    <input type="text" @bind="searchQuery" placeholder="App suchen..." />
    <button @onclick="SearchPackages">Suchen</button>
</div>

<div class="apps-container">
    @foreach (var app in filteredApps)
    {
        <div class="app">
            <div class="app-icon" style="background-color:@app.Color;">
                <i class="bi @app.IconClass"></i>
            </div>
            <div class="app-details">
                <h3>@app.Name</h3>
                <p>@app.Description</p>
                <div class="button-container">
                    <button class="copy-button" @onclick="() => DownloadApp(app.Command)">Befehl kopieren</button>
                </div>
            </div>
        </div>
    }
</div>

<style>
    h1 {
        font-family: 'Playwrite CL', sans-serif;
        color: #AFDDE5;
        text-align: center;
        margin-top: 20px;
    }

    .search-container {
        display: flex;
        justify-content: center;
        margin: 20px 0;
    }

        .search-container input {
            padding: 10px;
            font-size: 16px;
            border: 2px solid #1E1E24;
            border-radius: 5px;
            margin-right: 10px;
            width: 300px;
        }

        .search-container button {
            padding: 10px 20px;
            font-size: 16px;
            background-color: #FFBD00;
            color: #333;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .search-container button:hover {
                background-color: #FFD54F;
            }

    .apps-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
        padding: 20px;
    }

    .app {
        background-color: #1E1E24;
        color: #FFFFFF;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .app:hover {
            transform: translateY(-8px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
        }

    .app-icon {
        background-color: #333333;
        padding: 15px;
        text-align: center;
    }

        .app-icon i {
            font-size: 24px;
            color: #FFBD00;
        }

    .app-details {
        padding: 20px;
    }

        .app-details h3 {
            margin-top: 0;
            font-size: 18px;
        }

        .app-details p {
            color: #CCCCCC;
            font-size: 14px;
        }

    .button-container {
        display: flex;
        justify-content: flex-end;
        margin-top: 10px;
    }

    .copy-button {
        background-color: #FFBD00;
        color: #333;
        border: none;
        padding: 10px 20px;
        font-size: 14px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .copy-button:hover {
            background-color: #FFD54F;
        }
</style>

@code {
    private string searchQuery;
    private List<App> filteredApps;

    protected override void OnInitialized()
    {
        filteredApps = AppDataService.GetAllApps();
    }

    private void SearchPackages()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredApps = AppDataService.GetAllApps();
        }
        else
        {
            filteredApps = AppDataService.GetAllApps()
                .Where(app => app.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private async Task DownloadApp(string command)
    {
        await JSRuntime.InvokeVoidAsync("eval", CopyToClipboardFunction);
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
    }

    private string CopyToClipboardFunction => @"
        function copyToClipboard(text) {
            var dummy = document.createElement('textarea');
            document.body.appendChild(dummy);
            dummy.value = text;
            dummy.select();
            document.execCommand('copy');
            document.body.removeChild(dummy);
            alert('Text kopiert: ' + text);
        }
    ";

    [Inject]
    private IJSRuntime JSRuntime { get; set; }
}
